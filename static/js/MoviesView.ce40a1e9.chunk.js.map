{"version":3,"sources":["services/movies-api.js","Components/Container/Container.js","Components/Container/Container.module.css","Components/Button/Button.js","Components/MoviesList/MoviesList.js","Components/MoviesList/MoviesList.module.css","Components/Button/Button.module.css","Components/SearchForm/SearchForm.module.css","Components/SearchForm/SearchForm.js","Components/MovieError/MovieError.js","views/MoviesView/MoviesView.js"],"names":["BASE_URL","API_KEY","fetchWihtErrorHandling","a","url","config","fetch","respons","ok","json","Promise","reject","console","log","fetchMoviesTrending","fetchMoviesById","movieId","fetchMoviesCast","fetchMoviesReviews","fetchMoviesByName","searchQuery","Container","title","children","className","s","container","module","exports","Button","onClick","type","button","MoviesList","movies","useRouteMatch","location","useLocation","urlForDetail","replace","list","map","movie","item","to","pathname","id","state","from","link","activeClassName","activeLink","SearchForm","onSubmit","useState","setSearchQuery","e","preventDefault","trim","toLowerCase","alert","searchForm","searchFormInput","autoComplete","value","onChange","currentTarget","pattern","autoFocus","placeholder","size","MovieError","MoviesView","setMovies","useEffect","moviesAPI","then","data","total_results","results","catch","error","warn"],"mappings":"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","file":"static/js/MoviesView.ce40a1e9.chunk.js","sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"37ddbc320f48fcbb375faaee253d2760\";\n\nasync function fetchWihtErrorHandling(url = \"\", config = {}) {\n  const respons = await fetch(url, config);\n\n  return respons.ok\n    ? await respons.json()\n    : Promise.reject(console.log(\"Not found\"));\n  // : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchMoviesTrending() {\n  return fetchWihtErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMoviesById({ movieId }) {\n  return fetchWihtErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n\nexport function fetchMoviesCast({ movieId }) {\n  return fetchWihtErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMoviesReviews({ movieId }) {\n  return fetchWihtErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMoviesByName({ searchQuery }) {\n  return fetchWihtErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1&include_adult=false`\n  );\n}\n\n","import PropTypes from \"prop-types\";\nimport s from \"../Container/Container.module.css\";\n\nfunction Container({ title, children }) {\n  return (\n    <div className={s.container}>\n      <h2> {title}</h2>\n\n      {children}\n    </div>\n  );\n}\n\nContainer.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Container;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2Mr8N\"};","import PropTypes from \"prop-types\";\n\nimport s from \"../Button/Button.module.css\";\n\nfunction Button({ onClick, children, type }) {\n  return (\n    <button type={type || \"button\"} className={s.button} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.object,\n  type: PropTypes.string,\n};\n\nexport default Button;\n","import PropTypes from \"prop-types\";\n\nimport { NavLink, useRouteMatch, useLocation } from \"react-router-dom\";\n\nimport s from \"../MoviesList/MoviesList.module.css\";\n\nfunction MoviesList({ movies }) {\n  const { url } = useRouteMatch();\n  const location = useLocation();\n\n  const urlForDetail = url.replace(\"movies\", \"\");\n\n  return (\n    <ul className={s.list}>\n          {movies.map((movie) => (\n          \n              <li key={movie.id} className={s.item}>\n                  \n                  <NavLink                     \n                      to={{                \n                          pathname: `${urlForDetail}movies/${movie.id}`,                          \n                          state: { from: location },              \n                      }}                      \n                      className={s.link}                      \n                      activeClassName={s.activeLink}                      \n                  >                      \n                      {movie.title}                      \n                  </NavLink>\n              </li>              \n          ))}          \n      </ul>      \n  );   \n    \n}\n\n\nMoviesList.propTypes = {\n  movies: PropTypes.array,\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MoviesList_list__m_Av6\",\"item\":\"MoviesList_item__4AEXM\",\"link\":\"MoviesList_link__2vE06\",\"activeLink\":\"MoviesList_activeLink__2nRcw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__GITcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchForm\":\"SearchForm_searchForm__AV5PK\",\"searchFormInput\":\"SearchForm_searchFormInput__29xxy\"};","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Button from \"../Button\";\n\nimport s from \"../SearchForm/SearchForm.module.css\";\nimport { BiSearchAlt } from \"react-icons/bi\";\n\nfunction SearchForm({ onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { value } = e.currentTarget;\n    setSearchQuery(value);\n  };\n\n  const reset = () => {\n    setSearchQuery(\"\");\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setSearchQuery(searchQuery.trim().toLowerCase());\n\n    if (searchQuery === \"\") {\n      alert(\"Input is empty\");\n      return;\n    }\n\n    onSubmit(searchQuery);\n\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.searchForm}>\n      <input\n        className={s.searchFormInput}\n        type=\"text\"\n        autoComplete=\"off\"\n        value={searchQuery}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        autoFocus\n        placeholder=\"Search movies\"\n      />\n\n      <Button type=\"submit\" children={<BiSearchAlt size=\"20\" />} />\n    </form>\n  );\n}\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","\n\nfunction MovieError() {\n  return <p>Unknown movie title, please try again! </p>;\n}\n\n\n\nexport default MovieError;\n","import React, { useState, useEffect } from \"react\";\n\nimport * as moviesAPI from \"../../services/movies-api\";\n\nimport Container from \"../../Components/Container/Container\";\nimport SearchForm from \"../../Components/SearchForm/SearchForm\";\nimport MoviesList from \"../../Components/MoviesList/MoviesList\";\nimport MovieError from \"../../Components/MovieError/MovieError\";\n\nfunction MoviesView() {\n  \n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n \n  const formSubmitHandler = (searchQuery) => {\n    setSearchQuery(searchQuery);\n  };\n \n  \n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n    moviesAPI\n      .fetchMoviesByName({ searchQuery })\n      .then((data) => {\n        if (data.total_results !== 0) {\n          return setMovies(data.results)\n        }   \n        return setSearchQuery(\"unCorrect\")\n      })\n      .catch((error) => console.warn(error));\n  }, [searchQuery]);\n\n\n \n\n  return (\n    <Container>\n      <SearchForm onSubmit={formSubmitHandler} />\n     { searchQuery !== 'unCorrect' ?\n        <MoviesList movies={movies} />\n        : <MovieError />\n      }\n    </Container>\n  );\n}\n\nexport default MoviesView;\n"],"sourceRoot":""}